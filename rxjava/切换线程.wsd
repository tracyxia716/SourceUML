@startuml 切换线程
autonumber
actor user


user->Schedulers : io
Schedulers->Schedulers : init

note right : 调用Schedulers.io()的方法出发了static代码块的初始化逻辑
create IOTask
Schedulers -> IOTask : new()
note left:IOTask实现了Callable通过call方法可返回IoScheduler对象
IOTask --> Schedulers : 返回IOTask对象
Schedulers -> RxJavaPlugins : initIoScheduler(Callable<Scheduler>)
RxJavaPlugins --> Schedulers : 返回IoScheduler对象
note right : 直接将IOTask对象传入并通过call方法返回IoScheduler对象

create NewThreadTask
Schedulers -> NewThreadTask : new
note left:NewThreadTask与IOTask同理
NewThreadTask-->Schedulers : 返回NewThreadTask对象
Schedulers -> RxJavaPlugins : initNewThreadScheduler(Callable<Scheduler>)
RxJavaPlugins --> Schedulers : 返回NewThreadScheduler对象
note right : 直接将NewThreadTask对象传入并通过call方法返回NewThreadScheduler对象


Schedulers->RxJavaPlugins:onIoScheduler(Scheduler)
RxJavaPlugins--->Schedulers : 返回IoScheduler对象
Schedulers --> user : 返回IoScheduler对象
== 1.创建IoScheduler阶段 ==
user -> ObservableCreate : subscribeOn(Scheduler)
create ObservableSubscribeOn
ObservableCreate -> ObservableSubscribeOn:new(ObservableSource<T>, Scheduler)
note left:第一个传递的当前的ObservableCreate对象，第二个传递的是IoScheduler
ObservableSubscribeOn-->ObservableCreate:返回ObservableSubscribeOn对象
ObservableCreate->RxJavaPlugins : onAssembly(Observable<T>)
RxJavaPlugins-->ObservableCreate:返回ObservableSubscribeOn对象
ObservableCreate-->user:返回ObservableSubscribeOn对象
== 2.调用subscribeOn阶段 ==
user -> Schedulers : newThread()
Schedulers -> RxJavaPlugins : onNewThreadScheduler(Scheduler)
RxJavaPlugins --> Schedulers : 返回NewThreadScheduler对象
Scheduler --> user : 返回NewThreadScheduler对象
== 3.创建NewThreadScheduler阶段 ==
user->ObservableSubscribeOn : observeOn(Scheduler)
ObservableSubscribeOn->ObservableSubscribeOn:observeOn(Scheduler, boolean, int)
note right: 最后一个参数传递的是Flowable.bufferSize()
create ObservableObserveOn
ObservableSubscribeOn->ObservableObserveOn:new(ObservableSource<T>, Scheduler, boolean, int)
ObservableObserveOn-->ObservableSubscribeOn:返回ObservableObserveOn对象
ObservableSubscribeOn->RxJavaPlugins:onAssembly(Observable)
RxJavaPlugins-->ObservableSubscribeOn:返回ObservableObserveOn对象
note left : 传递和返回的实际上就是ObservableObserveOn对象
ObservableSubscribeOn-->user:返回ObservableObserveOn对象
== 4.调用observeOn阶段 ==
user->ObservableObserveOn:subscribe(Observer)
ObservableObserveOn->RxJavaPlugins:onSubscribe(Observable,Observer)
note left : 第一个参数传递的是this,第二参数传的是传进来的Observer
RxJavaPlugins --> ObservableObserveOn:返回传递进来的Observer对象
ObservableObserveOn->ObservableObserveOn:subscribeActual(Observer)
ObservableObserveOn->NewThreadScheduler:createWorker()
create NewThreadWorker
NewThreadScheduler->NewThreadWorker:new(ThreadFactory)
NewThreadWorker-->NewThreadScheduler:返回NewThreadWorker对象
NewThreadScheduler-->ObservableObserveOn:返回NewThreadWorker对象

create ObserveOnObserver

ObservableObserveOn->ObserveOnObserver:new(Observer<? super T>, Scheduler.Worker, boolean, int)
ObserveOnObserver-->ObservableObserveOn:返回ObserveOnObserver对象
ObservableObserveOn->ObservableSubscribeOn:subscribe(Observer)
note left:传递ObserveOnObserver对象
ObservableSubscribeOn->RxJavaPlugins:onSubscribe(Observable<T>,Observer<? super T>)
RxJavaPlugins-->ObservableSubscribeOn:返回传递进来的Observer即ObservableObserveOn对象
ObservableSubscribeOn->ObservableSubscribeOn:subscribeActual(Observer)
note left: 传递ObserveOnObserver对象
create SubscribeOnObserver
ObservableSubscribeOn->SubscribeOnObserver:new(Observer)

ObservableSubscribeOn->ObserveOnObserver:onSubscribe(Disposable)
note left:传递的刚刚创建的ObserveOnObserver对象
create SpscLinkedArrayQueue
ObserveOnObserver->SpscLinkedArrayQueue:new(int)
SpscLinkedArrayQueue-->ObserveOnObserver:返回SpscLinkedArrayQueue对象
ObserveOnObserver->Observer:onSubscribe(Disposable)
note left:调用我们创建出来的Observer的onSubscribe方法
create SubscribeTask
ObservableSubscribeOn->SubscribeTask:new(SubscribeOnObserver)
SubscribeTask-->ObservableSubscribeOn:返回SubscribeTask对象
ObservableSubscribeOn->IoScheduler:scheduleDirect(Runnable)
note left:传递SubscribeTask对象
IoScheduler->IoScheduler:scheduleDirect(Runnable,long,TimeUnit)
IoScheduler->IoScheduler:createWorker()
IoScheduler-->IoScheduler:返回IoScheduler.EventLoopWorker对象
IoScheduler->RxJavaPlugins:onSchedule(Runnable)
RxJavaPlugins-->IoScheduler:返回Runnable对象
create DisposeTask
IoScheduler->DisposeTask:new(Runnable,Worker)
note left:传递刚刚创建Runable和Worker对象
DisposeTask-->IoScheduler:返回DisposeTask对象
IoScheduler->IoScheduler.EventLoopWorker:schedule(Runnable,long,TimeUnit)
IoScheduler.EventLoopWorker->IoScheduler.ThreadWorker:scheduleActual(Runnable,long,TimeUnit,DisposableContainer)
IoScheduler.ThreadWorker->RxJavaPlugins:onSchedule(Runnable)
RxJavaPlugins-->IoScheduler.ThreadWorker:返回Runnable对象
create ScheduledRunnable
IoScheduler.ThreadWorker->ScheduledRunnable:new(Runnable,DisposableContainer)
ScheduledRunnable->IoScheduler.ThreadWorker:返回ScheduledRunnable对象
IoScheduler.ThreadWorker->ScheduledExecutorService:submit(Callable<T>)
ScheduledExecutorService-->ScheduledRunnable:异步执行run方法

note left:传递刚刚创建的ScheduledRunnable对象
NewThreadWorker-->IoScheduler:返回ScheduledRunnable,实现了Disposable接口

IoScheduler-->ObservableSubscribeOn:返回Disposable对象
ObservableSubscribeOn->ObservableSubscribeOn.SubscribeOnObserver:setDisposable(Disposable)
ObservableSubscribeOn.SubscribeOnObserver->DisposableHelper:setOnce(AtomicReference<Disposable>,Disposable)



== 5.调用subscribe阶段 ==
@enduml